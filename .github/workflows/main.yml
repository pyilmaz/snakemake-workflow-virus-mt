name: Tests

on:
  push:
    branches: 
      - master
  pull_request:
    branches:
      - "*"

jobs:
  Cancel-previous-jobs:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: khan/pull-request-workflow-cancel@1.0.0
        with:
          workflows: "main.yml"
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'


  Formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Formatting
        uses: github/super-linter@v3.15.2
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_SNAKEMAKE_SNAKEFMT: true


  Linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint workflow
        uses: snakemake/snakemake-github-action@v1.15.0
        with:
          directory: .
          snakefile: workflow/Snakefile
          stagein: mamba install -n snakemake -c conda-forge peppy
          args: "--lint"


  Testing:
    runs-on: ubuntu-latest

    needs:
      - Formatting
      - Linting
    
    strategy:
      matrix:
        rule: [all, benchmark_strain_calling, benchmark_assembly, test_non_cov2, benchmark_strain_call_error]

    steps:
      - uses: actions/checkout@v2

      - name: Free some disk space
        run: |
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Install tree
        run: sudo apt-get install tree

      - name: Get date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash

      - name: Cache resources
        id: test-resources
        uses: actions/cache@v2
        with:
          path: |
            .tests/resources/minikraken-8GB
            .tests/resources/genomes/human-genome.fna.gz
            .test/resources/gisaid
          key: ${{ runner.os }}-test-resources-${{ steps.get-date.outputs.date }}-${{ hashFiles('**.tests/resources**taxo.k2d') }}
          restore-keys: |
            ${{ runner.os }}-test-resources-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-test-resources-

      - name: Cache results
        if: startsWith(matrix.rule, 'all')
        id: test-results
        uses: actions/cache@v2
        with:
          path: |
            .tests/results
          key: ${{ runner.os }}-results-${{ steps.get-date.outputs.date }}-${{ hashFiles('**results/2021-02-01/qc/multiqc.html') }}
          restore-keys: |
            ${{ runner.os }}-results-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-results-

      - name: Cache data
        if: startsWith(matrix.rule, 'all')
        id: test-data
        uses: actions/cache@v2
        with:
          path: |
            .tests/data
          key: ${{ runner.os }}-test-data-${{ steps.get-date.outputs.date }}-${{ hashFiles('**.tests/data/*.fastq.gz') }}
          restore-keys: |
            ${{ runner.os }}-test-data-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-test-data-

      - name: Cache benchmark data
        if: startsWith(matrix.rule, 'all') != true
        id: benchmark-data
        uses: actions/cache@v2
        with:
          path: |
            .tests/resources/benchmarking
          key: ${{ runner.os }}-benchmark-data-${{ steps.get-date.outputs.date }}-${{ hashFiles('**.tests/resources/benchmarking/**/reads.1.fastq.gz') }}
          restore-keys: |
            ${{ runner.os }}-benchmark-data-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-benchmark-data-

      - name: Cache test dependencies
        if: startsWith(matrix.rule, 'all')
        id: test-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .tests/.snakemake/conda
          key: ${{ runner.os }}-sars-cov-test-dependencies-${{ steps.get-date.outputs.date }}-${{ hashFiles('*.tests/.snakemake/conda/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-sars-cov-test-dependencies-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-sars-cov-test-dependencies-

      - name: Cache benchmark dependencies
        if: startsWith(matrix.rule, 'all') != true
        id: benchmark-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .tests/.snakemake/conda
          key: ${{ runner.os }}-sars-cov-benchmark-dependencies-${{ steps.get-date.outputs.date }}-${{ hashFiles('*.tests/.snakemake/conda/*.yaml') }}
          restore-keys: |
            ${{ runner.os }}-sars-cov-benchmark-dependencies-${{ steps.get-date.outputs.date }}-
            ${{ runner.os }}-sars-cov-benchmark-dependencies-

      - name: Download test data
        if: steps.test-data.outputs.cache-hit != 'true' && startsWith(matrix.rule, 'all')
        run: |
          mkdir -p .tests/data
          curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR486/002/ERR4861412/ERR4861412_1.fastq.gz > .tests/data/ERR4861412_1.fastq.gz
          curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR486/002/ERR4861412/ERR4861412_2.fastq.gz > .tests/data/ERR4861412_2.fastq.gz
      
      - name: Use smaller reference files for testing
        if: steps.test-resources.outputs.cache-hit != 'true'
        run: |
          mkdir -p .tests/resources/minikraken-8GB
          curl -SL https://github.com/thomasbtf/small-kraken-db/raw/master/human_k2db.tar.gz | tar zxvf - -C .tests/resources/minikraken-8GB --strip 1
          mkdir -p .tests/resources/genomes
          curl -SL "https://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?id=NC_000021.9&db=nuccore&report=fasta" | gzip -c > .tests/resources/genomes/human-genome.fna.gz
          mkdir -p .tests/resources/gisaid
          printf "resources/genomes/B.1.1.7.fasta\nresources/genomes/B.1.351.fasta" > .tests/resources/gisaid/strain-genomes.txt
          curl -SL "https://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?id=MW735442.1&db=nuccore&report=fasta" | grep "\S" > .tests/resources/genomes/B.1.1.7.fasta
          curl -SL "https://www.ncbi.nlm.nih.gov/sviewer/viewer.fcgi?id=MT324062.1&db=nuccore&report=fasta" | grep "\S" > .tests/resources/genomes/B.1.351.fasta

      - name: Print tree
        run: tree .tests/ -C

      - name: Test rule ${{ matrix.rule }}
        uses: snakemake/snakemake-github-action@v1.15.0
        with:
          directory: .tests
          snakefile: workflow/Snakefile
          stagein: mamba install -n snakemake -c conda-forge peppy -y
          args: "--use-conda --show-failed-logs --cores 2 --resources ncbi_api_requests=1 --conda-cleanup-pkgs cache --conda-frontend mamba ${{ matrix.rule }}"

      - name: Test report
        uses: snakemake/snakemake-github-action@v1.15.0
        with:
          directory: .tests
          snakefile: workflow/Snakefile
          stagein: mamba install -n snakemake -c conda-forge peppy
          args: "${{ matrix.rule }} --report report.zip"

      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: report-${{ matrix.rule }}
          path: .tests/report.zip
          
      - name: Upload logs
        uses: actions/upload-artifact@v2
        with:
          name: log-${{ matrix.rule }}
          path: .tests/logs/

      # - name: Unit test
      #     args: "--generate-unit-tests"
      # - name: Test workflow (singularity)
      #     args: "--use-conda --use-singularity --show-failed-logs --cores 2 --resources ncbi_api_requests=1 --conda-cleanup-pkgs cache --conda-frontend mamba"
      # - name: Test input changes
      #     args: "--use-conda --show-failed-logs --cores 2 --resources ncbi_api_requests=1 --conda-cleanup-pkgs cache --conda-frontend mamba -R `snakemake --list-input-changes`"      
      # - name: Test code changes
      #     args: "--use-conda --show-failed-logs --cores 2 --resources ncbi_api_requests=1 --conda-cleanup-pkgs cache --conda-frontend mamba -R `snakemake --list-code-changes`"
      # - name: Test params changes
      #     args: "--use-conda --show-failed-logs --cores 2 --resources ncbi_api_requests=1 --conda-cleanup-pkgs cache --conda-frontend mamba -R `snakemake --list-params-changes`"

      - name: Check strain calling bechmark
        if: matrix.rule == 'benchmark_strain_calling'
        run: |
          cat .tests/results/benchmarking/strain-calling.csv
          if (tail -n+2 .tests/results/benchmarking/strain-calling.csv | grep mismatch > /dev/null)
          then
            echo "Strain calling failed in some cases (see above)."
            exit 1
          else
            echo "Strain calling was successful in all cases."
          fi

      - name: Check assembly bechmark
        if: matrix.rule == 'benchmark_assembly'
        run: |
          cat .tests/results/benchmarking/assembly.csv
          if [[ $(tail -1 .tests/results/benchmarking/assembly.csv) < 0.8 ]]
          then
            echo "Assembly bechmarking failed. There is at least one assembly where the contigs do not cover 80% of the original sequence (see above)."
            exit 1
          else
            echo "Assembly was successful."
          fi

      - name: Print non-sars-cov-2 kallisto calls
        if: matrix.rule == 'test_non_cov2'
        run: |
          cat .tests/results/test-cases/tables/strain-calls/non-cov2-*.strains.kallisto.tsv

      - name: Test non-sars-cov-2 coronaviruses
        if: matrix.rule == 'test_non_cov2'
        run: |
          cat .tests/results/test-cases/non-sars-cov-2.csv
          if (cat .tests/results/test-cases/non-sars-cov-2.csv | grep 'is sars-cov-2' > /dev/null)
          then
              echo "Workflow failed! A non-sars-cov-2 genome was identified as sars-cov-2 (see above)."
              exit 1
          else
              echo "Workflow sucessfully identified samples as non-sars-cov-2 in all cases."
          fi


      - name: Print disk space
        run: sudo df -h

      - name: Print tree
        run: tree .tests/ -C

      - name: Change permissions for caching
        run: sudo chmod -R 755 .tests/.snakemake/conda
